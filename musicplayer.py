# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'musicplayer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from pickletools import string1
from tracemalloc import start
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from tkinter.ttk import Progressbar
import time
import pygame, pygame.mixer

run=0
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(331, 523)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.playButton = QtWidgets.QPushButton(self.centralwidget)
        self.playButton.setGeometry(QtCore.QRect(120, 400, 81, 23))
        self.playButton.setObjectName("playButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 0, 151, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Playbill")
        font.setPointSize(36)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.coverArtImage = QtWidgets.QLabel(self.centralwidget)
        self.coverArtImage.setGeometry(QtCore.QRect(70, 180, 181, 211))
        self.coverArtImage.setText("")
        self.coverArtImage.setPixmap(QtGui.QPixmap("Conversations.jpg"))
        self.coverArtImage.setScaledContents(True)
        self.coverArtImage.setObjectName("coverArtImage")
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, 0, 331, 531))
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap("background.webp"))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(50, 480, 261, 10))
        palette = QtGui.QPalette()
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        #palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        #palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        gradient = QtGui.QLinearGradient(0.0, 0.0, 1.0, 1.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.323864, QtGui.QColor(255, 255, 255))
        gradient.setColorAt(1.0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        #palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.progressBar.setPalette(palette)
        self.progressBar.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.323864 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.progressBar.setMaximum(135)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setFormat("")
        self.progressBar.setObjectName("progressBar")
        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setGeometry(QtCore.QRect(280, 200, 22, 160))
        self.verticalSlider.setMaximum(10)
        self.verticalSlider.setProperty("value", 2)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.verticalSlider.setTickInterval(10)
        self.verticalSlider.setObjectName("verticalSlider")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 370, 51, 16))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_2.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 90, 131, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_3.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.songComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.songComboBox.setGeometry(QtCore.QRect(160, 90, 161, 22))
        self.songComboBox.setObjectName("songComboBox")
        self.songComboBox.addItem("")
        self.songComboBox.addItem("")
        self.songComboBox.addItem("")
        self.songComboBox.addItem("")
        self.songComboBox.addItem("")
        self.songComboBox.addItem("")
        self.nextSongButton = QtWidgets.QPushButton(self.centralwidget)
        self.nextSongButton.setGeometry(QtCore.QRect(210, 400, 41, 23))
        self.nextSongButton.setObjectName("nextSongButton")
        self.prevSongButton = QtWidgets.QPushButton(self.centralwidget)
        self.prevSongButton.setGeometry(QtCore.QRect(70, 400, 41, 23))
        self.prevSongButton.setObjectName("prevSongButton")
        self.timerStatusLabel = QtWidgets.QLabel(self.centralwidget)
        self.timerStatusLabel.setGeometry(QtCore.QRect(150, 490, 31, 16))
        self.timerStatusLabel.setObjectName("timerStatusLabel")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(170, 440, 70, 17))
        self.checkBox.setObjectName("checkBox")
        self.pauseButton = QtWidgets.QPushButton(self.centralwidget)
        self.pauseButton.setGeometry(QtCore.QRect(90, 440, 51, 23))
        self.pauseButton.setObjectName("pauseButton")
        self.songLabel = QtWidgets.QLabel(self.centralwidget)
        self.songLabel.setGeometry(QtCore.QRect(70, 160, 251, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.songLabel.setFont(font)
        self.songLabel.setText("")
        self.songLabel.setObjectName("songLabel")
        self.background.raise_()
        self.playButton.raise_()
        self.label.raise_()
        self.coverArtImage.raise_()
        self.progressBar.raise_()
        self.verticalSlider.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.songComboBox.raise_()
        self.nextSongButton.raise_()
        self.prevSongButton.raise_()
        self.timerStatusLabel.raise_()
        self.checkBox.raise_()
        self.pauseButton.raise_()
        self.songLabel.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
        #Change the color of the progressBar
        self.progressBar.setStyleSheet("QProgressBar::chunk "
                  "{"
                    "background-color: black;"
                  "}")

        self.playButton.clicked.connect(self.worker1)
        self.playButton.clicked.connect(self.playMusic)

        self.nextSongButton.clicked.connect(self.nextSong)
        self.prevSongButton.clicked.connect(self.prevSong)
        self.pauseButton.clicked.connect(self.pauseAndUnpause)
        
        self.songComboBox.activated.connect(self.changeMusicArt)

        #Starting the mixer
        pygame.mixer.init()
        self.verticalSlider.valueChanged.connect(self.changeVolume)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Music Player by Lam Pham"))
        self.playButton.setText(_translate("MainWindow", "Play"))
        self.label.setText(_translate("MainWindow", "Music Player"))
        self.label_2.setText(_translate("MainWindow", "Volume"))
        self.label_3.setText(_translate("MainWindow", "Choose a Song:"))
        self.songComboBox.setItemText(0, _translate("MainWindow", "Conversations by Juice Wrld"))
        self.songComboBox.setItemText(1, _translate("MainWindow", "Fast by Juice Wrld"))
        self.songComboBox.setItemText(2, _translate("MainWindow", "Relocate by Juice Wrld"))
        self.songComboBox.setItemText(3, _translate("MainWindow", "Rapstar by Polo G"))
        self.songComboBox.setItemText(4, _translate("MainWindow", "Stay by Kid Laroi"))
        self.songComboBox.setItemText(5, _translate("MainWindow", "Live This Wild by Lil Mosey"))
        self.nextSongButton.setText(_translate("MainWindow", "------>"))
        self.prevSongButton.setText(_translate("MainWindow", "<------"))
        self.timerStatusLabel.setText(_translate("MainWindow", "0:00"))
        self.checkBox.setText(_translate("MainWindow", "Repeat"))
        self.pauseButton.setText(_translate("MainWindow", "Pause"))


    def getSong(self):
        #Get the current song artist included from the combo box
        currentSongWithArtist=self.songComboBox.currentText().split()
        #Will hold the song without the artist
        currentSong=[]

        i=0
        #Iterate while the word by hasn't been reached
        while currentSongWithArtist[i]!='by':
            currentSong.append(currentSongWithArtist[i])
            i+=1

        #Make the list into a string
        currentSong="".join(currentSong)

        return currentSong

    def playMusic(self):    
        #Get the current song
        currentSong=self.getSong()
        
        #Loading the song
        pygame.mixer.music.load(f"{currentSong}.mp3")
        
        #Start playing the song
        pygame.mixer.music.play()
        
        #Loop the music if the checkBox is checked-currently not working(not resseting status label)
        if self.checkBox.isChecked():
            #time.sleep(141)
            #self.calc.terminate()
            self.worker1()
            self.playMusic()

    def getTimeOfSong(self):
        time=0
        #Dictionary to store the song and how long the song is in seconds
        songsAndTimes={"Conversations":282,"LiveThisWild":130,"Rapstar":168,"Relocate":208,"Stay":141,"Fast":208}

        #Get the time of the song
        currentSong=self.getSong()
        time=songsAndTimes[currentSong]

        return time

    def nextSong(self):
        #Get the index of the selected song
        index=self.songComboBox.currentIndex()

        if self.songComboBox.count()-1 != index:
            #Set the current index to be the next one unless it's the last song
            self.songComboBox.setCurrentIndex(index+1)

            #Change the music art
            self.changeMusicArt()

    def prevSong(self):
        #Get the index of the selected song
        index=self.songComboBox.currentIndex()

        if index!=0:
            #Set the current index to be the next one unless it's the first song
            self.songComboBox.setCurrentIndex(index-1)

            #Change the music art
            self.changeMusicArt()
        
    def changeMusicArt(self):
        #Get the current song and change the cover art
        currentSong=self.getSong()
        self.coverArtImage.setPixmap(QtGui.QPixmap(f"{currentSong}.jpg"))

        #Update the songLabel also
        self.songLabel.setText(self.songComboBox.currentText())

    def changeVolume(self):
        #Get the value, but divide by 10 for pygame
        value = self.verticalSlider.value()/10
        #Set the volume
        pygame.mixer.music.set_volume(value)

    def pauseAndUnpause(self):
        #Get the text from the pauseButton
        text=self.pauseButton.text()
        if text=="Pause":
            #Pause the music and change the text to Unpause
            pygame.mixer.music.pause()
            self.pauseButton.setText("Unpause")
            #Terminate the running thread
            self.calc.terminate()
        else:
            #Unpause the music and change the text to Pause
            pygame.mixer.music.unpause()
            self.pauseButton.setText("Pause")
            #Get the current number of seconds
            currentTimeList=self.timerStatusLabel.text().split(":")
            currentSeconds=int(currentTimeList[0])*60+int(currentTimeList[1])
            
            #Call the worker function passing in the number of current seconds to start another thread
            self.worker1(currentSeconds+1)

    #Multithreading method for progress bar update, default start seconds is 0
    def worker1(self,startSeconds=0):
        #If a song is currently playing whilst the play button was hit, terminate the thread to start a new one
        if pygame.mixer.music.get_busy():
            self.calc.terminate()

        #Create an instance of a worker thread class
        global calc
        self.calc = External(startSeconds)
        
        #Get the time of the song and globalize it to use it in other methods
        global timeOfSong
        timeOfSong=self.getTimeOfSong()
        
        #Connect the signal with the onCountChanged method to update the progressBar
        self.calc.signal1.connect(self.updateProgressBar)
        #Connect the signal with the updateTimeLabel method to update the timeLabel
        self.calc.signal2.connect(self.updateTimeLabel)

        #Start the thread
        self.calc.start()
        

    def updateProgressBar(self, value):
        #Set the bar's maximum to be the time of the song
        self.progressBar.setMaximum(timeOfSong)
        #Update the progress bar using emitted value
        self.progressBar.setValue(value)
        self.progressBar.repaint()

    def updateTimeLabel(self,value):
        #Update the timeLabel using emitted value
        self.timerStatusLabel.setText(value)
        #Use repaint to update the screen
        self.timerStatusLabel.repaint()

class External(QThread):
    #Tells worker signal being sent is of type int
    signal1 = pyqtSignal(int)
    #Tells worker signal being sent is of type string
    signal2 = pyqtSignal(str)

    def __init__(self, startSeconds, parent=None):
        QThread.__init__(self, parent)
        self.startSeconds = startSeconds

    #Starting time of song
    global numbersList
    
    def run(self):
        numbersList=[0,0,0]
        #Get the starting time based on the number of seconds
        for i in range(self.startSeconds):
            if i%60==0 and i!=0:
                numbersList[0]+=1
                numbersList[1]=0
                numbersList[2]=0

            elif i%10==0 and i!=0:
                numbersList[1]+=1
                numbersList[2]=0
                
            else:
                numbersList[2]+=1
        
        for i in range(self.startSeconds,timeOfSong+1):
            if i%60==0 and i!=0:
                numbersList[0]+=1
                numbersList[1]=0
                numbersList[2]=0

            elif i%10==0 and i!=0:
                numbersList[1]+=1
                numbersList[2]=0
                
            else:
                numbersList[2]+=1

            #Sends signals to main thread
            self.signal1.emit(i)
            #print(str(round(numbersList[0]))+":"+str(round(numbersList[1]))+str(round(numbersList[2])))
            self.signal2.emit(str(numbersList[0])+":"+str(numbersList[1])+str(numbersList[2]))
            time.sleep(1)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
